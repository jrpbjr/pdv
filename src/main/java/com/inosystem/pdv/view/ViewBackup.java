package com.inosystem.pdv.view;

import com.inosystem.pdv.util.AguardeGerandoRelatorio;
import com.inosystem.pdv.util.BackupMySQL;
import com.inosystem.pdv.util.Mascara;
import java.io.File;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
/*import util.AguardeGerandoRelatorio;
import util.Mascara;
import util.BackupMySQL;*/

/**
 *
 * @author Jrpbjr
 */
public class ViewBackup extends javax.swing.JFrame {

    BackupMySQL backupMySQL = new BackupMySQL();
    Mascara bLMascaras = new Mascara();

    /**
     * Creates new form ViewBackup
     */
    public ViewBackup() throws Exception {
        initComponents();
        setExtendedState(JFrame.MAXIMIZED_BOTH);
        listarDiretorio();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jtBackups = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Backup e Restore");
        setIconImage(new ImageIcon(getClass().getResource("/imagens/blicon.png")).getImage());

        jtBackups.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Nome", "Caminho", "Data", "Tamanho"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jtBackups.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(jtBackups);
        if (jtBackups.getColumnModel().getColumnCount() > 0) {
            jtBackups.getColumnModel().getColumn(3).setMinWidth(100);
            jtBackups.getColumnModel().getColumn(3).setPreferredWidth(100);
            jtBackups.getColumnModel().getColumn(3).setMaxWidth(100);
        }

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/icons 20/icons8-salvar-filled-50.png"))); // NOI18N
        jButton1.setText("Fazer backup");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/icons 20/icons8-baixar-filled-50.png"))); // NOI18N
        jButton2.setText("Restaurar backup");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/icons 20/icons8-sair-filled-50.png"))); // NOI18N
        jButton3.setText("Sair");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 580, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton1)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 354, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2)
                    .addComponent(jButton3))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        final AguardeGerandoRelatorio carregando = new AguardeGerandoRelatorio();
        carregando.setVisible(true);
        Thread t = new Thread() {
            @Override
            public void run() {
                // fazer backup
                if (backupMySQL.Backupdbtosql()) {
                    JOptionPane.showMessageDialog(null, "Backup realizado com sucesso!");
                    try {
                        listarDiretorio();
                    } catch (Exception ex) {
                        Logger.getLogger(ViewBackup.class.getName()).log(Level.SEVERE, null, ex);
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "Erro ao realizar o backup!", "ERRO", JOptionPane.ERROR_MESSAGE);
                }
                carregando.dispose();
            }
        };
        t.start();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        final AguardeGerandoRelatorio carregando = new AguardeGerandoRelatorio();
        carregando.setVisible(true);
        Thread t = new Thread() {
            @Override
            public void run() {
                // restaurar backup
                int linha = jtBackups.getSelectedRow();
                String nome = (String) jtBackups.getValueAt(linha, 1);
                //pegunta se realmente deseja excluir
                int opcao = JOptionPane.showConfirmDialog(null, "Tem certeza que deseja"
                        + " restaurar o banco?", "Atenção", JOptionPane.YES_NO_OPTION);
                //se sim exclui, se não não faz nada    
                if (opcao == JOptionPane.OK_OPTION) {
                    if (backupMySQL.Restoredbfromsql(nome)) {
                        JOptionPane.showMessageDialog(null, "Banco restaurado!");
                    } else {
                        JOptionPane.showMessageDialog(null, "Você cancelou", "ATENÇÃO", JOptionPane.WARNING_MESSAGE);
                    }
                }
            }
        };
        t.start();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_jButton3ActionPerformed

    //Converte byte em mb
    private static final long MEGABYTE = 1024L;

    public static long bytesToMeg(long bytes) {
        return bytes / MEGABYTE;
    }

    public void listarDiretorio() throws Exception {
        long dataLong;
        String dataString;
        //Configura a tabela
        jtBackups.getColumnModel().getColumn(0).setPreferredWidth(250); //nome
        jtBackups.getColumnModel().getColumn(1).setPreferredWidth(350); //caminho
        jtBackups.getColumnModel().getColumn(2).setPreferredWidth(100); //tamanho

        File diretorio = new File("C:\\BLVendas\\backup\\");
        if (!diretorio.exists()) {
            diretorio.mkdirs(); //mkdir() cria somente um diretório, mkdirs() cria diretórios e subdiretórios.
        }
        File[] arquivos = diretorio.listFiles();
        DefaultTableModel modelo = (DefaultTableModel) jtBackups.getModel();
        modelo.setNumRows(0);

        if (arquivos != null) {
            int length = arquivos.length;
            for (int i = 0; i < length; ++i) {
                File file = arquivos[i];

                if (file.isFile()) {
                    //pegar somente a data do arquivo
                    try {
                        dataLong = Long.parseLong(file.getName().substring(7, 20));
                    } catch (Exception e) {
                        dataLong = 0;
                    }
                    try {
                        dataString = bLMascaras.converteTimeEmDataHora(dataLong);
                    } catch (Exception e) {
                        dataString = null;
                    }
                    modelo.addRow(new Object[]{
                        file.getName(),
                        file.getAbsolutePath(),
                        dataString,
                        bytesToMeg(file.length()) + " KB"
                    });
                } else if (file.isDirectory()) {
                }
            }
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ViewBackup.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ViewBackup.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ViewBackup.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ViewBackup.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new ViewBackup().setVisible(true);
                } catch (Exception ex) {
                    Logger.getLogger(ViewBackup.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jtBackups;
    // End of variables declaration//GEN-END:variables
}
