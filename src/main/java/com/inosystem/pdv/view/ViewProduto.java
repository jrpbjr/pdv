/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.inosystem.pdv.view;

import controller.ControllerFornecedor;
import controller.ControllerProdutos;
import controller.ControllerUnidadeMedia;
import java.awt.Image;
import java.awt.Toolkit;
import java.io.File;
import java.util.ArrayList;
import javax.swing.ImageIcon;
import javax.swing.JDialog;
import javax.swing.JOptionPane;
import javax.swing.RowFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;
import model.ModelFornecedor;
import model.ModelProdutos;
import model.ModelUnidadeMedia;
import util.BLMascaras;
import util.BrFileChooser;

/**
 * @author Jrpbjr * jrpbjr *
 */
public class ViewProduto extends javax.swing.JFrame {

    ModelProdutos modelProdutos = new ModelProdutos();
    ControllerProdutos controllerProdutos = new ControllerProdutos();
    ControllerFornecedor controllerFornecedor = new ControllerFornecedor();
    ControllerUnidadeMedia controllerUnidadeMedia = new ControllerUnidadeMedia();
    ModelUnidadeMedia modelUnidadeMedia = new ModelUnidadeMedia();
    ArrayList<ModelUnidadeMedia> listaModelUnidadeMedias = new ArrayList<>();
    ArrayList<ModelProdutos> listamModelProdutos = new ArrayList<ModelProdutos>();
    ArrayList<ModelFornecedor> listaFornecedor = new ArrayList<ModelFornecedor>();
    BLMascaras bLMascaras = new BLMascaras();
    String tipoCadastro, codigoDeBarras, nomeImagem, caminhoImagem;
    private File arquivoImagem;
    private java.awt.Image imagemB = null;

    /**
     * Creates new form ViewProduto
     */
    public ViewProduto() {
        initComponents();
//        new ExecutarSemLogin().autenticar();
        this.carregarProdutos();
        this.listarFornecedor();
        this.listarUnidadeMedidas();
        verificarFornecedoresEUnidades();
        setLocationRelativeTo(null);
        //novo inicio
        novoProduto();
        //novo fim
        pintarImagemPadrao();
    }

    private void verificarFornecedoresEUnidades() {
        if (cbUnidadeMedida.getItemCount() < 1 || cbFornecedores.getItemCount() < 1) {
            JOptionPane.showMessageDialog(this, "Cadastre primeiro fornecedores e unidades de medida!", "ERRO", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void pintarImagemPadrao() {
        caminhoImagem = "C:\\BLVendas\\imgProdutos\\produto-sem-imagem.jpg";
        this.imagemB = Toolkit.getDefaultToolkit().createImage(caminhoImagem);
        this.pintarImagem();
        //pega o nome da imagem
        this.jtfCaminhoImagem.setText(caminhoImagem);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        btPesquisaProduto = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        btAlterar = new javax.swing.JButton();
        btExcluir = new javax.swing.JButton();
        btCancelar = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tbProdutos = new javax.swing.JTable();
        jbSalvar = new javax.swing.JButton();
        tfCodigo = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jtfNome = new javax.swing.JTextField();
        tfPesquisaProduto = new javax.swing.JTextField();
        cbFornecedores = new componentes.UJComboBox();
        cbUnidadeMedida = new javax.swing.JComboBox();
        jLabel7 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jcbAtivo = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        jtfGarantia = new javax.swing.JFormattedTextField();
        jLabel4 = new javax.swing.JLabel();
        jcbOrigem = new javax.swing.JComboBox<>();
        jLabel9 = new javax.swing.JLabel();
        tfCodigoBarras = new javax.swing.JFormattedTextField();
        jLabel10 = new javax.swing.JLabel();
        jtfCaminhoImagem = new javax.swing.JTextField();
        jbImagem = new javax.swing.JButton();
        labelImagem = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jtfDescricao = new javax.swing.JTextField();
        jtfPeso = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Produtos");
        setIconImage(new ImageIcon(getClass().getResource("/imagens/blicon.png")).getImage());
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        btPesquisaProduto.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/icons 20/icons8-binóculos-filled-50.png"))); // NOI18N
        btPesquisaProduto.setText("Pesquisar");
        btPesquisaProduto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btPesquisaProdutoActionPerformed(evt);
            }
        });
        jPanel1.add(btPesquisaProduto, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 240, 110, -1));

        jLabel1.setText("Nome:");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(98, 10, -1, -1));

        jLabel3.setText("Fornecedor:");
        jPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 110, 70, -1));

        btAlterar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/icons 20/icons8-editar-filled-50.png"))); // NOI18N
        btAlterar.setText("Alterar");
        btAlterar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btAlterarActionPerformed(evt);
            }
        });
        jPanel1.add(btAlterar, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 580, 100, -1));

        btExcluir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/icons 20/icons8-excluir-filled-50.png"))); // NOI18N
        btExcluir.setText("Excluir");
        btExcluir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btExcluirActionPerformed(evt);
            }
        });
        jPanel1.add(btExcluir, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 580, 100, -1));

        btCancelar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/icons 20/icons8-fechar-janela-filled-50.png"))); // NOI18N
        btCancelar.setText("Limpar");
        btCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btCancelarActionPerformed(evt);
            }
        });
        jPanel1.add(btCancelar, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 580, 100, -1));

        tbProdutos.setAutoCreateRowSorter(true);
        tbProdutos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Código", "Cód. Barras", "Nome", "Garantia", "Peso", "Ativo", "Fornecedor"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tbProdutos.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        tbProdutos.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tbProdutos.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(tbProdutos);
        if (tbProdutos.getColumnModel().getColumnCount() > 0) {
            tbProdutos.getColumnModel().getColumn(0).setPreferredWidth(60);
            tbProdutos.getColumnModel().getColumn(1).setPreferredWidth(100);
            tbProdutos.getColumnModel().getColumn(2).setPreferredWidth(250);
            tbProdutos.getColumnModel().getColumn(3).setPreferredWidth(60);
            tbProdutos.getColumnModel().getColumn(4).setPreferredWidth(60);
            tbProdutos.getColumnModel().getColumn(5).setPreferredWidth(40);
            tbProdutos.getColumnModel().getColumn(6).setMinWidth(150);
            tbProdutos.getColumnModel().getColumn(6).setPreferredWidth(150);
            tbProdutos.getColumnModel().getColumn(6).setMaxWidth(150);
        }

        jPanel1.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 290, 640, 280));

        jbSalvar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/icons 20/icons8-salvar-filled-50.png"))); // NOI18N
        jbSalvar.setText("Salvar");
        jbSalvar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbSalvarActionPerformed(evt);
            }
        });
        jPanel1.add(jbSalvar, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 580, 100, -1));

        tfCodigo.setEditable(false);
        tfCodigo.setEnabled(false);
        jPanel1.add(tfCodigo, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 30, 82, -1));

        jLabel5.setText("Código:");
        jPanel1.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, -1, -1));

        jtfNome.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jtfNomeFocusLost(evt);
            }
        });
        jPanel1.add(jtfNome, new org.netbeans.lib.awtextra.AbsoluteConstraints(98, 31, 370, -1));

        tfPesquisaProduto.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                tfPesquisaProdutoFocusLost(evt);
            }
        });
        jPanel1.add(tfPesquisaProduto, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 240, 390, -1));
        jPanel1.add(cbFornecedores, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 130, 370, -1));

        jPanel1.add(cbUnidadeMedida, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 130, 80, -1));

        jLabel7.setText("Unid. Med.");
        jPanel1.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 110, -1, -1));

        jLabel6.setText("Código de barras EAN:");
        jPanel1.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 160, -1, -1));

        jLabel8.setText("Pesquisar:");
        jPanel1.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 220, -1, -1));

        jcbAtivo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Inativo", "Ativo" }));
        jPanel1.add(jcbAtivo, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 30, 80, -1));

        jLabel2.setText("Situação:");
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 10, -1, -1));

        jtfGarantia.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));
        jtfGarantia.setText("0");
        jPanel1.add(jtfGarantia, new org.netbeans.lib.awtextra.AbsoluteConstraints(569, 30, 80, -1));

        jLabel4.setText("Dias garantia:");
        jPanel1.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 10, -1, -1));

        jcbOrigem.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Nacional", "Importado" }));
        jPanel1.add(jcbOrigem, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 130, 80, -1));

        jLabel9.setText("Peso kg");
        jPanel1.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 110, -1, -1));

        tfCodigoBarras.setToolTipText("Para produto sem código d barras informe 0");
        jPanel1.add(tfCodigoBarras, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 180, 150, -1));

        jLabel10.setText("Imagem do produto:");
        jPanel1.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 160, -1, -1));
        jPanel1.add(jtfCaminhoImagem, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 180, 270, -1));

        jbImagem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/icons 20/icons8-pesquisar-filled-50.png"))); // NOI18N
        jbImagem.setText("IMG");
        jbImagem.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jbImagemFocusLost(evt);
            }
        });
        jbImagem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbImagemActionPerformed(evt);
            }
        });
        jPanel1.add(jbImagem, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 180, -1, -1));
        jPanel1.add(labelImagem, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 180, 100, 100));

        jLabel12.setText("Origem:");
        jPanel1.add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 110, -1, -1));

        jLabel11.setText("Imagem produto");
        jPanel1.add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 160, -1, -1));

        jLabel13.setText("Descrição completa do produto");
        jPanel1.add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 60, -1, -1));

        jtfDescricao.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jtfDescricaoFocusLost(evt);
            }
        });
        jPanel1.add(jtfDescricao, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 80, 640, -1));

        jtfPeso.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jtfPesoKeyReleased(evt);
            }
        });
        jPanel1.add(jtfPeso, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 130, 80, -1));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 660, 620));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btPesquisaProdutoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btPesquisaProdutoActionPerformed
//filtrar dados na tabela
        DefaultTableModel tabela = (DefaultTableModel) this.tbProdutos.getModel();
        final TableRowSorter<TableModel> sorter = new TableRowSorter<TableModel>(tabela);
        this.tbProdutos.setRowSorter(sorter);
        String text = tfPesquisaProduto.getText();
        sorter.setRowFilter(RowFilter.regexFilter(text, 2));
    }//GEN-LAST:event_btPesquisaProdutoActionPerformed

    private void btAlterarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btAlterarActionPerformed
        int linhaSelecionada = tbProdutos.getSelectedRow();
        // Verificamos se existe realmente alguma linha selecionada
        if (linhaSelecionada < 0) {
            JOptionPane.showMessageDialog(this, "Você deve selecionar um item na tabela antes de clicar no botão!", "ATENÇÃO", JOptionPane.WARNING_MESSAGE);
        } else {
            novoProduto();
            recuperarProduto();
            tipoCadastro = "alteracao";
            //recuperar imagem e pintar
            this.imagemB = Toolkit.getDefaultToolkit().createImage(jtfCaminhoImagem.getText());
            this.pintarImagem();
        }
    }//GEN-LAST:event_btAlterarActionPerformed

    private void btExcluirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btExcluirActionPerformed
        //excluir produto
        int linhaSelecionada = tbProdutos.getSelectedRow();
        // Verificamos se existe realmente alguma linha selecionada
        if (linhaSelecionada < 0) {
            JOptionPane.showMessageDialog(this, "Você deve selecionar um item na tabela antes de clicar no botão!", "ATENÇÃO", JOptionPane.WARNING_MESSAGE);
        } else {
            this.excluirProduto();
        }
    }//GEN-LAST:event_btExcluirActionPerformed

    private void btCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btCancelarActionPerformed
        novoProduto();
    }//GEN-LAST:event_btCancelarActionPerformed

    private void jbSalvarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbSalvarActionPerformed
        //verificar se existe uma imagem selecionada, se não seta imagem padrão
        if (jtfCaminhoImagem.getText().equals("")
                || jtfCaminhoImagem.getText() == null) {
            pintarImagemPadrao();
        }

        modelProdutos = controllerProdutos.getProdutosCodigoBarrasController(tfCodigoBarras.getText());
        if (tipoCadastro.equals("novo")) {
            if (modelProdutos.getCodigoBarrasEan() == null || modelProdutos.getCodigoBarrasEan().equals("0")) {
                salvarProduto();
            } else {
                JOptionPane.showMessageDialog(this, "Já existe um produto com este código de barras, \n"
                        + "Para cadastrar um produto sem código de barras digite 0!", "ATENÇÃO", JOptionPane.WARNING_MESSAGE);
            }
        } else if (tipoCadastro.equals("alteracao")) {
            if (modelProdutos.getCodigoBarrasEan() == null
                    || modelProdutos.getCodigoBarrasEan().equals("0")
                    || codigoDeBarras.equals(tfCodigoBarras.getText())) {
                alterarProduto();
            } else {
                JOptionPane.showMessageDialog(this, "Já existe um produto com este código de barras, \n"
                        + "Para cadastrar um produto sem código de barras digite 0!", "ATENÇÃO", JOptionPane.WARNING_MESSAGE);
            }
        }
    }//GEN-LAST:event_jbSalvarActionPerformed

    private void jbImagemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbImagemActionPerformed
        BrFileChooser brFileChooser = new BrFileChooser();
        this.arquivoImagem = brFileChooser.getArquivo(new JDialog(), "jpg", "jpg");
        this.imagemB = Toolkit.getDefaultToolkit().createImage(this.arquivoImagem.getAbsolutePath());
        this.pintarImagem();
        //pega o nome da imagem
        this.jtfCaminhoImagem.setText(arquivoImagem.getPath());
        caminhoImagem = arquivoImagem.getPath();
        nomeImagem = arquivoImagem.getName();
    }//GEN-LAST:event_jbImagemActionPerformed

    private void jtfNomeFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jtfNomeFocusLost
        // converte em maiusculo o que o usuario digitar
        this.jtfNome.setText(jtfNome.getText().toUpperCase());
        this.jtfNome.setText(bLMascaras.TiraAcentos(jtfNome.getText()));
    }//GEN-LAST:event_jtfNomeFocusLost

    private void tfPesquisaProdutoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tfPesquisaProdutoFocusLost
        // converte em maiusculo o que o usuario digitar
        this.tfPesquisaProduto.setText(tfPesquisaProduto.getText().toUpperCase());
        this.tfPesquisaProduto.setText(bLMascaras.TiraAcentos(tfPesquisaProduto.getText()));
    }//GEN-LAST:event_tfPesquisaProdutoFocusLost

    private void jbImagemFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jbImagemFocusLost
        // setar imagem produto se não ouver nenhuma
        if (jtfCaminhoImagem.getText().equals("") || jtfCaminhoImagem.getText() == null) {
            jtfCaminhoImagem.setText("C:\\BLVendas\\imgProdutos\\produto-sem-imagem.jpg");
        }
    }//GEN-LAST:event_jbImagemFocusLost

    private void jtfDescricaoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jtfDescricaoFocusLost
        // TODO add your handling code here:
        this.jtfDescricao.setText(jtfDescricao.getText().toUpperCase());
        this.jtfDescricao.setText(bLMascaras.TiraAcentos(jtfDescricao.getText()));
    }//GEN-LAST:event_jtfDescricaoFocusLost

    private void jtfPesoKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtfPesoKeyReleased
        // TODO add your handling code here:
        this.jtfPeso.setText(new BLMascaras().converterVirgulaParaPonto(this.jtfPeso.getText()));
    }//GEN-LAST:event_jtfPesoKeyReleased

    private void listarUnidadeMedidas() {
        listaModelUnidadeMedias = controllerUnidadeMedia.getListaUnidadeMediaController();
        cbUnidadeMedida.removeAllItems();
        for (int i = 0; i < listaModelUnidadeMedias.size(); i++) {
            cbUnidadeMedida.addItem(listaModelUnidadeMedias.get(i).getAbreviacao());
        }
    }

    private void listarFornecedor() {
        listaFornecedor = controllerFornecedor.getListaFornecedorController();
        cbFornecedores.removeAllItems();
        for (int i = 0; i < listaFornecedor.size(); i++) {
            cbFornecedores.addItem(listaFornecedor.get(i).getNome());
        }
    }

    /**
     * pinta a imagem no label
     */
    public void pintarImagem() {
        if (this.imagemB != null) {
            this.labelImagem.setIcon(new ImageIcon(this.imagemB.getScaledInstance(this.labelImagem.getWidth(), this.labelImagem.getHeight(), Image.SCALE_DEFAULT)));
        }
    }

    private void excluirProduto() {
        int linha = tbProdutos.getSelectedRow();
        String nome = (String) tbProdutos.getValueAt(linha, 2);
        int codigo = (Integer) tbProdutos.getValueAt(linha, 0);
        //pegunta se realmente deseja excluir
        int opcao = JOptionPane.showConfirmDialog(this, "Tem certeza que deseja"
                + " excluir o registro \nNome: "
                + nome + " ?", "Atenção", JOptionPane.YES_NO_OPTION);
        //se sim exclui, se não não faz nada    
        if (opcao == JOptionPane.OK_OPTION) {
            if (controllerProdutos.excluirProdutosController(codigo)) {
                JOptionPane.showMessageDialog(this, "Registro excluido com suscesso!");
                carregarProdutos();
            } else {
                JOptionPane.showMessageDialog(this, "Você não pode excluir um produto que já foi vendido! \n"
                        + "Para excluir o produto, delete primeiro a(s) venda(s) deste produto.", "ATENÇÃO", JOptionPane.WARNING_MESSAGE);
            }
        }
    }

    private boolean recuperarProduto() {
        //recebe a linha selecionada
        int linha = this.tbProdutos.getSelectedRow();
        //pega o codigo do cliente na linha selecionada
        int codigo = (Integer) tbProdutos.getValueAt(linha, 0);
        try {
            //recupera os dados do banco
            modelProdutos = controllerProdutos.getProdutosController(codigo);
            //seta os dados na interface
            //setar código de barras na variavel global para verificar alteração
            codigoDeBarras = modelProdutos.getCodigoBarrasEan();
            this.tfCodigo.setText(String.valueOf(modelProdutos.getCodigo()));
            this.jtfNome.setText(modelProdutos.getNome());
            this.jtfDescricao.setText(modelProdutos.getDescricaoProduto());
            this.cbFornecedores.setSelectedItem(controllerFornecedor.getFornecedorController(modelProdutos.getFornecedoresCodigo()).getNome());
            this.tfCodigoBarras.setText(modelProdutos.getCodigoBarrasEan());
            this.cbUnidadeMedida.setSelectedItem(controllerUnidadeMedia.getUnidadeMediaController(modelProdutos.getUnidadeMedida()).getAbreviacao());
            this.jcbAtivo.setSelectedIndex(modelProdutos.getAtivo());
            this.jcbOrigem.setSelectedIndex(modelProdutos.getOrigem());
            this.jtfGarantia.setText(modelProdutos.getDiasGarantia() + "");
            this.jtfPeso.setText(modelProdutos.getPeso() + "");
            this.jtfCaminhoImagem.setText(modelProdutos.getImagemProduto());
            return true;
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Código inválido ou nenhum registro selecionado", "Aviso", JOptionPane.WARNING_MESSAGE);
            return false;
        }
    }

    private boolean alterarProduto() {
        modelProdutos.setCodigo(Integer.parseInt(this.tfCodigo.getText()));
        modelProdutos.setNome(this.jtfNome.getText());
        modelProdutos.setDescricaoProduto(this.jtfDescricao.getText());
        modelProdutos.setFornecedoresCodigo(controllerFornecedor.getFornecedorController(this.cbFornecedores.getSelectedItem().toString()).getCodigo());
        if (tfCodigoBarras.getText().equals("")) {
            modelProdutos.setCodigoBarrasEan("0");
        } else {
            modelProdutos.setCodigoBarrasEan(this.tfCodigoBarras.getText());
        }
        modelProdutos.setUnidadeMedida(controllerUnidadeMedia.getUnidadeMediaController(this.cbUnidadeMedida.getSelectedItem().toString()).getCodigo());
        modelProdutos.setAtivo(jcbAtivo.getSelectedIndex());
        modelProdutos.setOrigem(jcbOrigem.getSelectedIndex());
        modelProdutos.setDiasGarantia(Integer.parseInt(jtfGarantia.getText()));
        modelProdutos.setPeso(Double.parseDouble(jtfPeso.getText()));
        
        if (verificarExistenciaIMG()) {
            modelProdutos.setImagemProduto(jtfCaminhoImagem.getText().replace("\\", "\\\\"));
        } else {
            modelProdutos.setImagemProduto("C:\\BLVendas\\imgProdutos\\produto-sem-imagem.jpg".replace("\\", "\\\\"));
        }

//altera 
        if (controllerProdutos.atualizarProdutosController(modelProdutos)) {
            JOptionPane.showMessageDialog(this, "Registro alterado com sucesso!");
            this.carregarProdutos();
            novoProduto();
            return true;
        } else {
            JOptionPane.showMessageDialog(this, "Erro ao alterar os dados!", "ERRO", JOptionPane.ERROR_MESSAGE);
            return false;
        }
    }

    private void carregarProdutos() {
        listamModelProdutos = controllerProdutos.getListaProdutosController();
        DefaultTableModel modelo = (DefaultTableModel) tbProdutos.getModel();
        modelo.setNumRows(0);
        String ativo = "";
        String fornecedor = "";
        //CARREGA OS DADOS DA LISTA NA TABELA
        int cont = listamModelProdutos.size();
        for (int i = 0; i < cont; i++) {
            if (listamModelProdutos.get(i).getAtivo() == 1) {
                ativo = "SIM";
            } else {
                ativo = "NAO";
            }
            fornecedor = controllerFornecedor.getFornecedorController(listamModelProdutos.get(i).getFornecedoresCodigo()).getNome();
            modelo.addRow(new Object[]{
                listamModelProdutos.get(i).getCodigo(),
                listamModelProdutos.get(i).getCodigoBarrasEan(),
                listamModelProdutos.get(i).getNome(),
                listamModelProdutos.get(i).getDiasGarantia(),
                listamModelProdutos.get(i).getPeso(),
                ativo,
                fornecedor
            });
        }
    }

    private void novoProduto() {
        tfCodigo.setText("Novo");
        jtfNome.setText("");
        jtfDescricao.setText("");
        tfCodigoBarras.setText("");
        jtfGarantia.setText("0");
        jtfPeso.setText("0");
        tfPesquisaProduto.setText("");
        jtfCaminhoImagem.setText("C:\\BLVendas\\imgProdutos\\produto-sem-imagem.jpg");

        cbUnidadeMedida.setSelectedItem(0);
        tipoCadastro = "novo";
        jcbAtivo.setSelectedIndex(1);
        cbFornecedores.setSelectedIndex(0);
    }

    private boolean salvarProduto() {
        modelProdutos.setNome(this.jtfNome.getText());
        modelProdutos.setDescricaoProduto(this.jtfDescricao.getText());
        modelProdutos.setNcm("");
        modelProdutos.setTipoNcm("");
        modelProdutos.setSubTribut(0);
        modelProdutos.setIcmsCst(0);
        modelProdutos.setIcms(0);
        modelProdutos.setIcmsRed(0);
        modelProdutos.setIpiCst("");
        modelProdutos.setIpi(0);
        modelProdutos.setPisCst("");
        modelProdutos.setPis(0);
        modelProdutos.setCofinsCst("");
        modelProdutos.setCofins(0);
        modelProdutos.setValor(0.0);
        modelProdutos.setValorCusto(0.0);
        modelProdutos.setFornecedoresCodigo(controllerFornecedor.getFornecedorController(this.cbFornecedores.getSelectedItem().toString()).getCodigo());
        modelProdutos.setEstoque(0);
        if (tfCodigoBarras.getText().equals("")) {
            modelProdutos.setCodigoBarrasEan("0");
        } else {
            modelProdutos.setCodigoBarrasEan(this.tfCodigoBarras.getText());
        }
        modelProdutos.setUnidadeMedida(controllerUnidadeMedia.getUnidadeMediaController(this.cbUnidadeMedida.getSelectedItem().toString()).getCodigo());
        modelProdutos.setAtivo(jcbAtivo.getSelectedIndex());
        modelProdutos.setOrigem(jcbOrigem.getSelectedIndex());
        try {
            modelProdutos.setDiasGarantia(Integer.parseInt(jtfGarantia.getText()));
        } catch (Exception e) {
            modelProdutos.setDiasGarantia(0);
        }
        try {
            modelProdutos.setPeso(Double.parseDouble(bLMascaras.converterVirgulaParaPonto(jtfPeso.getText())));
        } catch (Exception e) {
            modelProdutos.setPeso(0.0);
        }
        if (verificarExistenciaIMG()) {
            modelProdutos.setImagemProduto(jtfCaminhoImagem.getText().replace("\\", "\\\\"));
        } else {
            modelProdutos.setImagemProduto("C:\\BLVendas\\imgProdutos\\produto-sem-imagem.jpg".replace("\\", "\\\\"));
        }

//salvar 
        if (controllerProdutos.salvarProdutosController(modelProdutos) > 0) {
            JOptionPane.showMessageDialog(this, "Registro gravado com sucesso!");
            this.carregarProdutos();
            novoProduto();
            return true;
        } else {
            JOptionPane.showMessageDialog(this, "Erro ao gravar os dados!", "ERRO", JOptionPane.ERROR_MESSAGE);
            return false;
        }
    }

    private boolean verificarExistenciaIMG() {
        try {
            File file = new File(jtfCaminhoImagem.getText().replace("\\", "\\\\"));
            if (file.exists()) {
                return true;
            } else {
                return false;
            }
        } catch (Exception e) {
            return false;
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ViewProduto().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btAlterar;
    private javax.swing.JButton btCancelar;
    private javax.swing.JButton btExcluir;
    private javax.swing.JButton btPesquisaProduto;
    private componentes.UJComboBox cbFornecedores;
    private javax.swing.JComboBox cbUnidadeMedida;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton jbImagem;
    private javax.swing.JButton jbSalvar;
    private javax.swing.JComboBox<String> jcbAtivo;
    private javax.swing.JComboBox<String> jcbOrigem;
    private javax.swing.JTextField jtfCaminhoImagem;
    private javax.swing.JTextField jtfDescricao;
    private javax.swing.JFormattedTextField jtfGarantia;
    private javax.swing.JTextField jtfNome;
    private javax.swing.JTextField jtfPeso;
    private javax.swing.JLabel labelImagem;
    private javax.swing.JTable tbProdutos;
    private javax.swing.JTextField tfCodigo;
    private javax.swing.JFormattedTextField tfCodigoBarras;
    private javax.swing.JTextField tfPesquisaProduto;
    // End of variables declaration//GEN-END:variables
}
